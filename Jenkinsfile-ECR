@Library('my-shared-library') _

pipeline {
    agent any

    parameters {
        choice(
            name: 'action',
            choices: 'create\ndelete',
            description: 'Choose create/Destroy'
        )
        string(name: 'aws_account_id', description: "AWS Account ID", defaultValue: '435951944183')
        string(name: 'Region', description: "Region of ECR", defaultValue: 'us-west-2')
        string(name: 'ECR_REPO_NAME', description: "Name of the ECR", defaultValue: 'samit_java')
    }
 environment{

        ACCESS_KEY = credentials('AWS_ACCESS_KEY_ID')
        SECRET_KEY = credentials('AWS_SECRET_KEY_ID')
        
    }

    stages{
         
        stage('Git Checkout'){
                    when { expression {  params.action == 'create' } }
            steps{
            gitCheckout(
                branch: "main",
                url: "https://github.com/Samitsingh001/mrdevops_java_app.git"
            )
            }
        }

   stages {

        stage('Unit Test Maven') {
            when { expression { params.action == 'create' } }
            steps {
                script {
                    mvnTest()
                }
            }
        }

        stage('Integration Test Maven') {
            when { expression { params.action == 'create' } }
            steps {
                script {
                    mvnIntegrationTest()
                }
            }
        }

        stage('Static Code Analysis: SonarQube') {
            when { expression { params.action == 'create' } }
            steps {
                script {
                    def sonarCredsId = 'sonarqube-api'    
                    statiCodeAnalysis(sonarCredsId)
                }
            }
        }

        stage('Quality Gate Status Check: SonarQube') {
            when { expression { params.action == 'create' } }
            steps {
                script {
                    def sonarCredsId = 'sonarqube-api'    
                    QualityGateStatus(sonarCredsId)
                }
            }
        }

        stage('Maven Build') {
            when { expression { params.action == 'create' } }
            steps {
                script {
                    mvnBuild()
                }
            }
        }

        stage('Docker Image Build: ECR') {
            when { expression { params.action == 'create' } }
            steps {
                script {
                    dockerBuild(params.aws_account_id, params.Region, params.ECR_REPO_NAME)
                }
            }
        }

        stage('Docker Image Scan: Trivy') {
            when { expression { params.action == 'create' } }
            steps {
                script {
                    dockerImageScan(params.aws_account_id, params.Region, params.ECR_REPO_NAME)
                }
            }
        }

        stage('Docker Image Push: ECR') {
            when { expression { params.action == 'create' } }
            steps {
                script {
                    dockerImagePush(params.aws_account_id, params.Region, params.ECR_REPO_NAME)
                }
            }
        }
    }
}
